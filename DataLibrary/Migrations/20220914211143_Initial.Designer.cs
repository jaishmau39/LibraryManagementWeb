// <auto-generated />
using System;
using DataLibrary;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataLibrary.Migrations
{
    [DbContext(typeof(LibraryContext))]
    [Migration("20220914211143_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DataLibrary.Models.AssetStatus", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("AssetStatuses");
                });

            modelBuilder.Entity("DataLibrary.Models.BranchTimes", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("ClosingTime")
                        .HasColumnType("int");

                    b.Property<int>("Day_of_Week")
                        .HasColumnType("int");

                    b.Property<int>("LibraryBranchID")
                        .HasColumnType("int");

                    b.Property<int>("OpeningTime")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("LibraryBranchID");

                    b.ToTable("BranchTimings");
                });

            modelBuilder.Entity("DataLibrary.Models.CheckOutHistory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime?>("CheckInDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckOutDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LibraryAssetAsset_ID")
                        .HasColumnType("int");

                    b.Property<int>("LibraryCardCardID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("LibraryAssetAsset_ID");

                    b.HasIndex("LibraryCardCardID");

                    b.ToTable("CheckOutHistories");
                });

            modelBuilder.Entity("DataLibrary.Models.Hold", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("Hold_Placed")
                        .HasColumnType("datetime2");

                    b.Property<int>("LibraryAssetAsset_ID")
                        .HasColumnType("int");

                    b.Property<int>("LibraryCardCardID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("LibraryAssetAsset_ID");

                    b.HasIndex("LibraryCardCardID");

                    b.ToTable("Holds");
                });

            modelBuilder.Entity("DataLibrary.Models.LibraryAsset", b =>
                {
                    b.Property<int>("Asset_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Asset_ID"), 1L, 1);

                    b.Property<int>("AvailabilityID")
                        .HasColumnType("int");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Last_LocationID")
                        .HasColumnType("int");

                    b.Property<int>("NumberofCopies")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Asset_ID");

                    b.HasIndex("AvailabilityID");

                    b.HasIndex("Last_LocationID");

                    b.ToTable("LibraryAssets");

                    b.HasDiscriminator<string>("Discriminator").HasValue("LibraryAsset");
                });

            modelBuilder.Entity("DataLibrary.Models.LibraryBranch", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Branch_Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("Date_Founded")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone_Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("LibraryBranches");
                });

            modelBuilder.Entity("DataLibrary.Models.LibraryCard", b =>
                {
                    b.Property<int>("CardID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CardID"), 1L, 1);

                    b.Property<DateTime>("Created_Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Overdue_Fee")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("CardID");

                    b.ToTable("LibraryCards");
                });

            modelBuilder.Entity("DataLibrary.Models.LoanedAsset", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("CheckoutDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LibraryAssetAsset_ID")
                        .HasColumnType("int");

                    b.Property<int>("LibraryCardCardID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("LibraryAssetAsset_ID");

                    b.HasIndex("LibraryCardCardID");

                    b.ToTable("LoanedAssets");
                });

            modelBuilder.Entity("DataLibrary.Models.Patron", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Branch_LocationID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateofBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Library_CardCardID")
                        .HasColumnType("int");

                    b.Property<string>("TelephoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("Branch_LocationID");

                    b.HasIndex("Library_CardCardID");

                    b.ToTable("Patrons");
                });

            modelBuilder.Entity("DataLibrary.Models.Book", b =>
                {
                    b.HasBaseType("DataLibrary.Models.LibraryAsset");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeweyIndex")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Book");
                });

            modelBuilder.Entity("DataLibrary.Models.Video", b =>
                {
                    b.HasBaseType("DataLibrary.Models.LibraryAsset");

                    b.Property<string>("Director")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Video");
                });

            modelBuilder.Entity("DataLibrary.Models.BranchTimes", b =>
                {
                    b.HasOne("DataLibrary.Models.LibraryBranch", "LibraryBranch")
                        .WithMany()
                        .HasForeignKey("LibraryBranchID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LibraryBranch");
                });

            modelBuilder.Entity("DataLibrary.Models.CheckOutHistory", b =>
                {
                    b.HasOne("DataLibrary.Models.LibraryAsset", "LibraryAsset")
                        .WithMany()
                        .HasForeignKey("LibraryAssetAsset_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLibrary.Models.LibraryCard", "LibraryCard")
                        .WithMany()
                        .HasForeignKey("LibraryCardCardID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LibraryAsset");

                    b.Navigation("LibraryCard");
                });

            modelBuilder.Entity("DataLibrary.Models.Hold", b =>
                {
                    b.HasOne("DataLibrary.Models.LibraryAsset", "LibraryAsset")
                        .WithMany()
                        .HasForeignKey("LibraryAssetAsset_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLibrary.Models.LibraryCard", "LibraryCard")
                        .WithMany()
                        .HasForeignKey("LibraryCardCardID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LibraryAsset");

                    b.Navigation("LibraryCard");
                });

            modelBuilder.Entity("DataLibrary.Models.LibraryAsset", b =>
                {
                    b.HasOne("DataLibrary.Models.AssetStatus", "Availability")
                        .WithMany()
                        .HasForeignKey("AvailabilityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLibrary.Models.LibraryBranch", "Last_Location")
                        .WithMany("Branch_Assets")
                        .HasForeignKey("Last_LocationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Availability");

                    b.Navigation("Last_Location");
                });

            modelBuilder.Entity("DataLibrary.Models.LoanedAsset", b =>
                {
                    b.HasOne("DataLibrary.Models.LibraryAsset", "LibraryAsset")
                        .WithMany()
                        .HasForeignKey("LibraryAssetAsset_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLibrary.Models.LibraryCard", "LibraryCard")
                        .WithMany("LoanedAssets")
                        .HasForeignKey("LibraryCardCardID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LibraryAsset");

                    b.Navigation("LibraryCard");
                });

            modelBuilder.Entity("DataLibrary.Models.Patron", b =>
                {
                    b.HasOne("DataLibrary.Models.LibraryBranch", "Branch_Location")
                        .WithMany("Branch_Patrons")
                        .HasForeignKey("Branch_LocationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLibrary.Models.LibraryCard", "Library_Card")
                        .WithMany()
                        .HasForeignKey("Library_CardCardID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch_Location");

                    b.Navigation("Library_Card");
                });

            modelBuilder.Entity("DataLibrary.Models.LibraryBranch", b =>
                {
                    b.Navigation("Branch_Assets");

                    b.Navigation("Branch_Patrons");
                });

            modelBuilder.Entity("DataLibrary.Models.LibraryCard", b =>
                {
                    b.Navigation("LoanedAssets");
                });
#pragma warning restore 612, 618
        }
    }
}
